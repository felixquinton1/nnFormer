###############################################
I am running the following nnFormer: 3d_fullres
My trainer class is:  <class 'nnformer.training.network_training.nnFormerTrainerV2_nnformer_acdc.nnFormerTrainerV2_nnformer_acdc'>
For that I will be using the following configuration:
num_classes:  2
modalities:  {0: 'T1w'}
use_mask_for_norm OrderedDict([(0, False)])
keep_only_largest_region None
min_region_size_per_class None
min_size_per_class None
normalization_schemes OrderedDict([(0, 'nonCT')])
stages...
stage:  0
{'batch_size': 4, 'num_pool_per_axis': [3, 5, 5], 'patch_size': array([ 14, 160, 160]), 'median_patient_size_in_voxels': array([103, 345, 443]), 'current_spacing': array([2.10004771, 0.9375    , 0.9375    ]), 'original_spacing': array([2.10004771, 0.9375    , 0.9375    ]), 'do_dummy_2D_data_aug': True, 'pool_op_kernel_sizes': [[1, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [1, 2, 2]], 'conv_kernel_sizes': [[1, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3], [3, 3, 3]]}
I am using stage 0 from these plans
I am using sample dice + CE loss
I am using data from this folder:  /home/felix/Bureau/db_nnFormer/nnFormer_preprocessed/Task001_ACDC/nnFormerData_plans_v2.1
###############################################
2022-07-08 14:58:21.602133: Using dummy2d data augmentation
[0.51612903 0.25806452 0.12903226 0.06451613 0.03225806]
loading dataset
loading all case properties
2022-07-08 14:58:25.337675: Using splits from existing split file: /home/felix/Bureau/db_nnFormer/nnFormer_preprocessed/Task001_ACDC/splits_final.pkl
2022-07-08 14:58:25.338076: The split file contains 5 splits.
2022-07-08 14:58:25.338371: Desired fold for training: 0
2022-07-08 14:58:25.338706: This split has 40 training and 15 validation cases.
unpacking dataset
done
/home/felix/anaconda3/envs/nnFormer2/lib/python3.6/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
model_down.patch_embed.norm.weight
model_down.patch_embed.norm.bias
model_down.layers.0.blocks.0.norm1.weight
model_down.layers.0.blocks.0.norm1.bias
model_down.layers.0.blocks.0.attn.qkv.weight
model_down.layers.0.blocks.0.attn.qkv.bias
model_down.layers.0.blocks.0.attn.proj.weight
model_down.layers.0.blocks.0.attn.proj.bias
model_down.layers.0.blocks.0.norm2.weight
model_down.layers.0.blocks.0.norm2.bias
model_down.layers.0.blocks.0.mlp.fc1.weight
model_down.layers.0.blocks.0.mlp.fc1.bias
model_down.layers.0.blocks.0.mlp.fc2.weight
model_down.layers.0.blocks.0.mlp.fc2.bias
model_down.layers.0.blocks.1.norm1.weight
model_down.layers.0.blocks.1.norm1.bias
model_down.layers.0.blocks.1.attn.qkv.weight
model_down.layers.0.blocks.1.attn.qkv.bias
model_down.layers.0.blocks.1.attn.proj.weight
model_down.layers.0.blocks.1.attn.proj.bias
model_down.layers.0.blocks.1.norm2.weight
model_down.layers.0.blocks.1.norm2.bias
model_down.layers.0.blocks.1.mlp.fc1.weight
model_down.layers.0.blocks.1.mlp.fc1.bias
model_down.layers.0.blocks.1.mlp.fc2.weight
model_down.layers.0.blocks.1.mlp.fc2.bias
model_down.layers.1.blocks.0.norm1.weight
model_down.layers.1.blocks.0.norm1.bias
model_down.layers.1.blocks.0.attn.qkv.weight
model_down.layers.1.blocks.0.attn.qkv.bias
model_down.layers.1.blocks.0.attn.proj.weight
model_down.layers.1.blocks.0.attn.proj.bias
model_down.layers.1.blocks.0.norm2.weight
model_down.layers.1.blocks.0.norm2.bias
model_down.layers.1.blocks.0.mlp.fc1.weight
model_down.layers.1.blocks.0.mlp.fc1.bias
model_down.layers.1.blocks.0.mlp.fc2.weight
model_down.layers.1.blocks.0.mlp.fc2.bias
model_down.layers.1.blocks.1.norm1.weight
model_down.layers.1.blocks.1.norm1.bias
model_down.layers.1.blocks.1.attn.qkv.weight
model_down.layers.1.blocks.1.attn.qkv.bias
model_down.layers.1.blocks.1.attn.proj.weight
model_down.layers.1.blocks.1.attn.proj.bias
model_down.layers.1.blocks.1.norm2.weight
model_down.layers.1.blocks.1.norm2.bias
model_down.layers.1.blocks.1.mlp.fc1.weight
model_down.layers.1.blocks.1.mlp.fc1.bias
model_down.layers.1.blocks.1.mlp.fc2.weight
model_down.layers.1.blocks.1.mlp.fc2.bias
model_down.layers.2.blocks.0.norm1.weight
model_down.layers.2.blocks.0.norm1.bias
model_down.layers.2.blocks.0.attn.qkv.weight
model_down.layers.2.blocks.0.attn.qkv.bias
model_down.layers.2.blocks.0.attn.proj.weight
model_down.layers.2.blocks.0.attn.proj.bias
model_down.layers.2.blocks.0.norm2.weight
model_down.layers.2.blocks.0.norm2.bias
model_down.layers.2.blocks.0.mlp.fc1.weight
model_down.layers.2.blocks.0.mlp.fc1.bias
model_down.layers.2.blocks.0.mlp.fc2.weight
model_down.layers.2.blocks.0.mlp.fc2.bias
model_down.layers.2.blocks.1.norm1.weight
model_down.layers.2.blocks.1.norm1.bias
model_down.layers.2.blocks.1.attn.qkv.weight
model_down.layers.2.blocks.1.attn.qkv.bias
model_down.layers.2.blocks.1.attn.proj.weight
model_down.layers.2.blocks.1.attn.proj.bias
model_down.layers.2.blocks.1.norm2.weight
model_down.layers.2.blocks.1.norm2.bias
model_down.layers.2.blocks.1.mlp.fc1.weight
model_down.layers.2.blocks.1.mlp.fc1.bias
model_down.layers.2.blocks.1.mlp.fc2.weight
model_down.layers.2.blocks.1.mlp.fc2.bias
model_down.layers.3.blocks.0.norm1.weight
model_down.layers.3.blocks.0.norm1.bias
model_down.layers.3.blocks.0.attn.qkv.weight
model_down.layers.3.blocks.0.attn.qkv.bias
model_down.layers.3.blocks.0.attn.proj.weight
model_down.layers.3.blocks.0.attn.proj.bias
model_down.layers.3.blocks.0.norm2.weight
model_down.layers.3.blocks.0.norm2.bias
model_down.layers.3.blocks.0.mlp.fc1.weight
model_down.layers.3.blocks.0.mlp.fc1.bias
model_down.layers.3.blocks.0.mlp.fc2.weight
model_down.layers.3.blocks.0.mlp.fc2.bias
model_down.layers.3.blocks.1.norm1.weight
model_down.layers.3.blocks.1.norm1.bias
model_down.layers.3.blocks.1.attn.qkv.weight
model_down.layers.3.blocks.1.attn.qkv.bias
model_down.layers.3.blocks.1.attn.proj.weight
model_down.layers.3.blocks.1.attn.proj.bias
model_down.layers.3.blocks.1.norm2.weight
model_down.layers.3.blocks.1.norm2.bias
model_down.layers.3.blocks.1.mlp.fc1.weight
model_down.layers.3.blocks.1.mlp.fc1.bias
model_down.layers.3.blocks.1.mlp.fc2.weight
model_down.layers.3.blocks.1.mlp.fc2.bias
model_down.norm0.weight
model_down.norm0.bias
model_down.norm1.weight
model_down.norm1.bias
model_down.norm2.weight
model_down.norm2.bias
model_down.norm3.weight
model_down.norm3.bias
decoder.layers.0.blocks.0.norm1.weight
decoder.layers.0.blocks.0.norm1.bias
decoder.layers.0.blocks.0.attn.kv.weight
decoder.layers.0.blocks.0.attn.kv.bias
decoder.layers.0.blocks.0.attn.proj.weight
decoder.layers.0.blocks.0.attn.proj.bias
decoder.layers.0.blocks.0.norm2.weight
decoder.layers.0.blocks.0.norm2.bias
decoder.layers.0.blocks.0.mlp.fc1.weight
decoder.layers.0.blocks.0.mlp.fc1.bias
decoder.layers.0.blocks.0.mlp.fc2.weight
decoder.layers.0.blocks.0.mlp.fc2.bias
decoder.layers.0.blocks.1.norm1.weight
decoder.layers.0.blocks.1.norm1.bias
decoder.layers.0.blocks.1.attn.qkv.weight
decoder.layers.0.blocks.1.attn.qkv.bias
decoder.layers.0.blocks.1.attn.proj.weight
decoder.layers.0.blocks.1.attn.proj.bias
decoder.layers.0.blocks.1.norm2.weight
decoder.layers.0.blocks.1.norm2.bias
decoder.layers.0.blocks.1.mlp.fc1.weight
decoder.layers.0.blocks.1.mlp.fc1.bias
decoder.layers.0.blocks.1.mlp.fc2.weight
decoder.layers.0.blocks.1.mlp.fc2.bias
decoder.layers.1.blocks.0.norm1.weight
decoder.layers.1.blocks.0.norm1.bias
decoder.layers.1.blocks.0.attn.kv.weight
decoder.layers.1.blocks.0.attn.kv.bias
decoder.layers.1.blocks.0.attn.proj.weight
decoder.layers.1.blocks.0.attn.proj.bias
decoder.layers.1.blocks.0.norm2.weight
decoder.layers.1.blocks.0.norm2.bias
decoder.layers.1.blocks.0.mlp.fc1.weight
decoder.layers.1.blocks.0.mlp.fc1.bias
decoder.layers.1.blocks.0.mlp.fc2.weight
decoder.layers.1.blocks.0.mlp.fc2.bias
decoder.layers.1.blocks.1.norm1.weight
decoder.layers.1.blocks.1.norm1.bias
decoder.layers.1.blocks.1.attn.qkv.weight
decoder.layers.1.blocks.1.attn.qkv.bias
decoder.layers.1.blocks.1.attn.proj.weight
decoder.layers.1.blocks.1.attn.proj.bias
decoder.layers.1.blocks.1.norm2.weight
decoder.layers.1.blocks.1.norm2.bias
decoder.layers.1.blocks.1.mlp.fc1.weight
decoder.layers.1.blocks.1.mlp.fc1.bias
decoder.layers.1.blocks.1.mlp.fc2.weight
decoder.layers.1.blocks.1.mlp.fc2.bias
decoder.layers.2.blocks.0.norm1.weight
decoder.layers.2.blocks.0.norm1.bias
decoder.layers.2.blocks.0.attn.kv.weight
decoder.layers.2.blocks.0.attn.kv.bias
decoder.layers.2.blocks.0.attn.proj.weight
decoder.layers.2.blocks.0.attn.proj.bias
decoder.layers.2.blocks.0.norm2.weight
decoder.layers.2.blocks.0.norm2.bias
decoder.layers.2.blocks.0.mlp.fc1.weight
decoder.layers.2.blocks.0.mlp.fc1.bias
decoder.layers.2.blocks.0.mlp.fc2.weight
decoder.layers.2.blocks.0.mlp.fc2.bias
decoder.layers.2.blocks.1.norm1.weight
decoder.layers.2.blocks.1.norm1.bias
decoder.layers.2.blocks.1.attn.qkv.weight
decoder.layers.2.blocks.1.attn.qkv.bias
decoder.layers.2.blocks.1.attn.proj.weight
decoder.layers.2.blocks.1.attn.proj.bias
decoder.layers.2.blocks.1.norm2.weight
decoder.layers.2.blocks.1.norm2.bias
decoder.layers.2.blocks.1.mlp.fc1.weight
decoder.layers.2.blocks.1.mlp.fc1.bias
decoder.layers.2.blocks.1.mlp.fc2.weight
decoder.layers.2.blocks.1.mlp.fc2.bias
I am using the pre_train weight!!
2022-07-08 14:58:36.276401: lr: 0.01
